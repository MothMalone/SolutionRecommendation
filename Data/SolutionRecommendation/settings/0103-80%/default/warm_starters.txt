# warm_starters.txt
# Place this in ../settings/default/ directory

import my_recommends as mr

# Define your warm starters
warm_starters = {}

# Random baseline
warm_starters['random1x'] = mr.RandomRecommender()

# Average rank
warm_starters['rank-ar'] = mr.AverageRankRecommender()

# L1 distance based
warm_starters['pmf-l1'] = mr.L1Recommender()

# KNN classifier
warm_starters['clf-knn'] = mr.KnnRecommender(kwargs={'n_neighbors': 5})

# Random Forest classifier
warm_starters['clf-rf'] = mr.RFRecommender(kwargs={'n_estimators': 100, 'random_state': 42})

# Neural Network classifier
warm_starters['clf-nn'] = mr.NNRecommender(kwargs={
    'input_dim': 10,  # Adjust based on your metafeatures
    'hidden_dim': 20,
    'lr': 0.01,
    'n_epoch': 100,
    'batch_size': 32,
    'is_print': False,
    'save_path': './model/clf-nn.pkl'
})

# Regressor
warm_starters['reg-nn'] = mr.RegressorRecommender(kwargs={
    'input_dim': 10,  # metafeatures + pipeline features
    'hidden_dim': 20,
    'lr': 0.01,
    'n_epoch': 100,
    'batch_size': 32,
    'is_print': False,
    'save_path': './model/reg-nn.pkl'
})

# AdaBoost Regressor
warm_starters['reg-ab'] = mr.AdaBoostRegressorRecommender(kwargs={
    'n_estimators': 50,
    'lr': 0.1,
    'loss': 'linear',
    'is_print': False,
    'save_path': './model/reg-ab.pkl'
})

# PMM (Pairwise Metafeature Matching)
warm_starters['pmm'] = mr.PmmRecommender(kwargs={
    'input_dim': 20,  # metafeatures + pipeline features
    'hidden_dim': 32,
    'output_dim': 1,
    'lr': 1e-3,
    'n_epoch': 50,
    'batch_size': 64,
    'margin': 0.8,
    'function': 'sigmoid',
    'distance': 'l1',
    'total_pairs': 10000,
    'pair_sd': 0.5,
    'pair_sp': 0.3,
    'rank_s1': 100,
    'rank_s2': 50,
    'random_sample': 1,
    'cuda': False,
    'is_print': False,
    'save_path': './model/pmm.pkl'
})

# Balanced PMM
warm_starters['bpmm'] = mr.BalancedPmmRecommender(kwargs={
    'input_dim1': 10,  # metafeatures dimension
    'input_dim2': 12,  # pipeline features dimension (12 pipelines)
    'hidden_dim': 32,
    'output_dim': 1,
    'lr': 1e-3,
    'n_epoch': 50,
    'batch_size': 64,
    'margin': 0.8,
    'function': 'sigmoid',
    'distance': 'l1',
    'total_pairs': 10000,
    'pair_sd': 0.5,
    'pair_sp': 0.3,
    'rank_s1': 100,
    'rank_s2': 50,
    'random_sample': 1,
    'cuda': False,
    'is_print': True,
    'save_path': './model/bpmm.pkl'
})